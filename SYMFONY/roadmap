                            ----------------
                                SYMFONY  
                            ----------------
LTS : Long Time Support

INTRO : Qu'est-ce que SYMFONY
ETAPE 1 : Installation de SF 3.4
ETAPE 2 : Les Bundles
ETAPE 3 : Les routes et les controllers
ETAPE 4 : Créer la boutique sur SF
ETAPE 5 : TWIG (moteur de template)
ETAPE 6 : Les assets
ETAPE 7 : Entités
ETAPE 8 : DOCTRINE
ETAPE 9 : Les formulaires
ETAPE 10 : Validation des données 
ETAPE 11 : Association Mapping
ETAPE 12 : Sécurité et Utilisateurs 
ETAPE 13 : Installation et boutique sur SF 4.3
BONUS : Mise en Prod
BONUS : Formulaire de contact 

-------------------------------------------
INTRO : Qu'est-ce que SYMFONY
-------------------------------------------

1/  Quel intérêt d'utiliser un framework

    A. Une organisation optimisée
    B. Fonctionnalités communes à tous les projets
    C. Service disponible (Routing, Sécurité, BDD, Moteur de template, Formulaire...)
    D. Communauté

2/ Choix du framework

    A. Propre Framework (pédagogie)
    B. Les framework Fullstack (Symfony, Zend, Laravel, Cake)
    C. Les minis Framework (Silex, Slim, CodeIgniter, Lumen...)

3/ Symfony

    -> Framework Français crée par Sensiolabs
    -> Versions : 
        LTS : (Long Time Support)
            v2.8
            v3.4 : 2.8 plus souple (moins rigide), avec des fonctionnalités 
            v4.4 : 3.4 BundleLess, Flex, Encore (Webpack), Maker, PHP 7.1

----------------------------------------

ETAPE 1 : Installation de SF 3.4
Sommaire : 
1/ Installer Composer
2/ Installer SF3.4
3/ Arborescence des dossiers et fichiers
4/ Lancement de l'application 

---------------------------------------- 

1/ Installer Composer 

Composer est un outils de dépendance. Il permet de télécharger et de mettre à jour tous les outils (services, composants, dépendances) dont on a besoin. 

    Télécharger : https://getcomposer.org/download/
    composer-setup.exe 

    -Installer : Suivre les étapes.


2/ Installer SF3.4

    - Dans le dossier Symfony
    - Maj + clic-droit : Ovrir une fenêtre powershell ici 

    <cmd>
    composer create-project symfony/framework-standard-edition test

    ==> A ce stade un dossier test a été crée. C'est un nouveau projet SF


3/ Arborescence des dossiers et fichiers

    - app/    : contient toute la configuration de l'app (BDD, sécurité, routes...)
    - bin/    : Les éxécutable de l' app (de SF)
    - src/    : Le dossier dans lequel nous allons coder notre MVC
    - var/    : Les fichiers écrits par SF au fur et à mesure (cache, logs)
    - tests/  : Les test unitaires.
    - web/    : Les repertoire WEB (app.php ou app_dev.php, img/css/js/fonts)
    - vendor/ : Le coeur de SF (les fichiers codés par les Sensio Labs)

    - composer.json : Contient la liste de toutes les dépendances dont ont a besoin 

4/ Lancement de l'application

    - Méthode 1 : 
    localhost/Back/SYMFONY/test/web/app.php
    localhost/Back/SYMFONY/test/web/app_dev.php

    - Méthode 2 :
    On va dans le dossier test/
    <cmd>
    php bin/console server:run 

    localhost:8000

    - Différences entre mode prod et dev :
    localhost/Back/SYMFONY/test/web/toto
    localhost:8000/toto



-------------------------------------------
ETAPE 2 : Les Bundles
Sommaire : 
1/ Le concepte des Bundles
2/ Création de notre premier Bundle
-------------------------------------------


1/ Le concepte des Bundles

    - Les Bundles sont des briques de notre applications.

    UserBundle :
        UserController (C)
        UserModel (M)
        View : inscription/connexion/profil...
    
    Avec la nouvelle version de SF (4), on considère qu'il est préférable de crée un seul bundle (AppBundle).

2/ Création de notre premier Bundle

    On va créer un Bundle : POLES/TestBundle

    <cmd>
    php bin/console generate:bundle

    -> yes
    -> POLES/TestBundle
    -> POLESTestBundle
    -> src/
    -> annotation

    => Notre Bundle a été crée, mais il faut l'enregistrer.

    <code>composer.json
    "psr-4": {
            "AppBundle\\": "src/AppBundle",
            "POLES\\": "src/POLES"
        },
    
    - Mise à jour de l'app
    <cmd>
    composer update 

    ==> Notre Bundle existe dans src/POLES/TestBundle
    Il est composé de 4 dossiers :
    - Controller : les controllers du bundle 
    - DependencyInjection : Injection de dépendences
    - Ressources : Vues et Routes (YML) et eventuellement JS
    - Test : Test liés aux fonctionnalité du Bundle

    ==> A ce stade le bundle est fonctionnel, mais il y a une petite erreur qu'on va corriger;

    - src/POLES/TestBundle/Controller/DefaultController.php 

    <code>
    return $this->render('POLESTestBundle:Default:index.html.twig');
    Devient :
    return $this->render('@POLESTest/Default/index.html.twig');

    ==> A ce stade ma page d'accueil affiche "Hello world"




----------------------------------------

ETAPE 3 : Les routes et les controllers
Sommaire : 
1/ La création de routes
2/ L'objet Request
3/ L'objet Response
4/ Redirection 
5/ Message 

----------------------------------------

1/ La création de routes
    ("/") -> route simple homepage
    ("/bonjour/") -> route echo (erreur)
    ("/bonjour2/") -> route response
    ("/hello/{prenom}") -> route response + param URL
    ("/hola/{prenom}") -> route render de vue + param URL
    ("/hola/{prenom}") -> route render de vue + 2 params URL
    ("/ciao/{prenom}/{age}") -> route render de vue + 2 params URL
    ("redirect/") -> route avec redirection (RedirectResponse)
    ("/redirect2") -> route avec redirection (redirectToRoute())
    ("/message/") -> route avec redirect et message en session 





2/ L'objet Request
    <code>
    use Symfony\Component\HttpFoundation\Request;

    Correspond à la partie requete de la requete HttpFoundation

    <ex code>
    <code>
    $session = $request->getSession();
    -> recupère la session ($_SESSION)

    Autres exemples : 
    <code>
    $session->set('prenom', 'Yannis');
    echo $session->get('prenom');

    Autres methodes : 
    <code>
    $request->session->set('prenom', 'Yannis');

    Autres utilité de $request : 
    index.php?argument_url=toto
    <code>
    $request->query->get('argument_url');

    $request->request->get('champs_form');
    $request->cookies->get('cookie');
    $request->server->get('server');

    /exemple/{prenom}
    $prenom

    /exemple/?prenom=Yannis
    $prenom


3/ L'objet Response
    - Correspond à la partie réponse d'une requête HTTp.

    <code>
    use Symfony\Component\HttpFoundation\Response;

    Toute action (fonction) doit avoir une réponse.
    <code>
    return new Response('toto');

    même la fonction render est une réponse.

    <code>
    return $this->render();
    return $this->getTemplating()->renderResponse;


4/ Redirection

    <code>première méthode : 
    use Symfony\Component\HttpFoundation\RedirectResponse;

    cf route "/redirect/" et "/redirect2/"

    /!\ A ce stade toutes nos routes doivent avoir un name

    5/ Message 

    <code>
    $session->getFlashBag()->add();

    -> permet de d'enregistrer des messages qui seront disponible dans d'autres pages (messages de félicitations, ou d'erreur).

    -> app.session : Qui nous permet en Twig de récupérer les infos en session.

    -> app.user : Qui nous permet en Twig de récupérer les infos de l'utilisateur actuellement connecté. 



-------------------------------------------
ETAPE 4 : Créer la boutique sur SF
Sommaire : 
1/ Creation du projet
2/ Réorganiser le AppBundle
3/ Création des premières routes 
-------------------------------------------

1/ Creation du projet

    - Dans le dossier Symfony
    <cmd>
    composer create-project symfony/framework-standard-edition Boutique3
    cd Boutique3
    php bin/console server:run

    Test : localhost:8000

2/ Réorganiser le AppBundle

    Localhost/                          -> Produit/index.html.twig
    localhost/categorie/pull            -> Produit/index.html.twig
    localhost/produit/12                -> Produit/show.html.twig

Admin Controller :

localhost/admin/produit/list/            -> Admin/list_produit.html.twig
        -> 'je suis dans la page qui liste les produits'

localhost/admin/produit/add/            -> Admin/form_produit.html.twig
        -> 'je suis dans le formulaire produit'


